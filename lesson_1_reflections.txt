How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    I did not have to go through the entire file to find out a small bug.
    The diff command, with its interactive method, printed out the line
    numbers where the files differed.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I can always check the working versions of the software and study the
    code. Every major and sometimes minor change will be accessible to me
    and I do not have to go through huge codes because of VCS.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manual committing keeps matters in my hand, i.e., I choose when my changes
    are logical enough to be reflected in the code repository. On the con side,
    I have to enter certain commands manually which I might be relucant to do.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because we most of the real-world softwares and applications require more
    than one file to run. We might have made logical changes to 2 or more
    files. Hence, the git's facility.

How can you use the commands git log and git diff to view the history of files?

    We can see the changes, more specifically, the deletions and insertions done
    between any two commits, that too on a per-file basis.

How might using version control make you more confident to make changes that
could break something?

    I can always checkout a previous commit and go back to an older and working
    version if I introduce some bug.

Now that you have your workspace set up, what do you want to try using Git for?

    Make a cool app.