What happens when you initialize a repository? Why do you need to do it?

A .git file is created inside the repository which means it is now ready to
be committed. It is required so that the directory can be committed and changes
can be tracked.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area contains the files that have been tracked by git since the last
changes were made, but have not yet been committed. The repository contains the
committed files. The value is that we can double-check before actually committing.

How can you use the staging area to make sure you have one commit per logical
change?

First we will add the changed files to the staging area using git add. Then
we will run git diff --staged, and then we can be sure of just one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When I want to add an update to the software that is not official, or I want add
documentation or a new language to the SW.

How do the diagrams help you visualize the branch structure?

They are a simple and effective method to view the commits, their parents and all
the branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

A new tip is created with the name same as the second branch argument in the
command. It is represented this way so that the commits are not lost.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

We can take care of crtical code changes ourselves. And the trivial changes
can be handled by Git.
